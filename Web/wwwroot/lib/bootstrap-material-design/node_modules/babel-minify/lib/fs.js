"use strict";

var isDir = function () {
  var _ref = _asyncToGenerator(function* (p) {
    try {
      return (yield lstat(p)).isDirectory();
    } catch (e) {
      return false;
    }
  });

  return function isDir(_x) {
    return _ref.apply(this, arguments);
  };
}();

var isFile = function () {
  var _ref2 = _asyncToGenerator(function* (p) {
    try {
      return (yield lstat(p)).isFile();
    } catch (e) {
      return false;
    }
  });

  return function isFile(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

// the async keyword simply exists to denote we are returning a promise
// even though we don't use await inside it


var readStdin = function () {
  var _ref3 = _asyncToGenerator(function* () {
    var code = "";
    var stdin = process.stdin;
    return new Promise(function (resolve) {
      stdin.setEncoding("utf8");
      stdin.on("readable", function () {
        var chunk = process.stdin.read();
        if (chunk !== null) code += chunk;
      });
      stdin.on("end", function () {
        resolve(code);
      });
    });
  });

  return function readStdin() {
    return _ref3.apply(this, arguments);
  };
}();

var handleStdin = function () {
  var _ref4 = _asyncToGenerator(function* (outputFilename, options) {
    var _minify = minify((yield readStdin()), options),
        code = _minify.code;

    if (outputFilename) {
      yield writeFile(outputFilename, code);
    } else {
      process.stdout.write(code);
    }
  });

  return function handleStdin(_x3, _x4) {
    return _ref4.apply(this, arguments);
  };
}();

var handleFile = function () {
  var _ref5 = _asyncToGenerator(function* (filename, outputFilename, options) {
    var _minify2 = minify((yield readFile(filename)), options),
        code = _minify2.code;

    if (outputFilename) {
      yield writeFile(outputFilename, code);
    } else {
      process.stdout.write(code);
    }
  });

  return function handleFile(_x5, _x6, _x7) {
    return _ref5.apply(this, arguments);
  };
}();

var handleFiles = function () {
  var _ref6 = _asyncToGenerator(function* (files, outputDir, options) {
    if (!outputDir) {
      throw new TypeError(`outputDir is falsy. Got "${outputDir}"`);
    }

    return Promise.all(files.map(function (file) {
      var outputFilename = path.join(outputDir, path.basename(file));
      return mkdirp(path.dirname(outputFilename)).then(function () {
        return handleFile(file, outputFilename, options);
      });
    }));
  });

  return function handleFiles(_x8, _x9, _x10) {
    return _ref6.apply(this, arguments);
  };
}();

var handleDir = function () {
  var _ref7 = _asyncToGenerator(function* (dir, outputDir, options) {
    if (!outputDir) {
      throw new TypeError(`outputDir is falsy`);
    }

    // relative paths
    var files = readdir(dir);

    return Promise.all(files.filter(function (file) {
      return isJsFile(file);
    }).map(function (file) {
      var outputFilename = path.join(outputDir, file);
      var inputFilename = path.join(dir, file);

      return mkdirp(path.dirname(outputFilename)).then(function () {
        return handleFile(inputFilename, outputFilename, options);
      });
    }));
  });

  return function handleDir(_x11, _x12, _x13) {
    return _ref7.apply(this, arguments);
  };
}();

var handleArgs = function () {
  var _ref8 = _asyncToGenerator(function* (args, outputDir, options) {
    var files = [];
    var dirs = [];

    if (!Array.isArray(args)) {
      throw new TypeError(`Expected Array. Got ${JSON.stringify(args)}`);
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var arg = _step.value;

        if (yield isFile(arg)) {
          files.push(arg);
        } else if (yield isDir(arg)) {
          dirs.push(arg);
        } else {
          throw new TypeError(`Input "${arg}" is neither a file nor a directory.`);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return Promise.all([handleFiles(files, outputDir, options)].concat(_toConsumableArray(dirs.map(function (dir) {
      return handleDir(dir, outputDir, options);
    }))));
  });

  return function handleArgs(_x14, _x15, _x16) {
    return _ref8.apply(this, arguments);
  };
}();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var fs = require("fs");
var path = require("path");
var readdir = require("fs-readdir-recursive");
var promisify = require("util.promisify");
var mkdirp = promisify(require("mkdirp"));

var minify = require("./");
var EXTENSIONS = [".js", ".mjs"];

var readFileAsync = promisify(fs.readFile);
var writeFileAsync = promisify(fs.writeFile);
var lstat = promisify(fs.lstat);

// set defaults
var readFile = function readFile(file) {
  return readFileAsync(file, { encoding: "utf-8" });
};
var writeFile = function writeFile(file, data) {
  return writeFileAsync(file, data, { encoding: "utf-8" });
};

function isJsFile(file) {
  return EXTENSIONS.some(function (ext) {
    return path.basename(file, ext) !== file;
  });
}

module.exports = {
  handleFile,
  handleStdin,
  handleFiles,
  handleDir,
  handleArgs,
  isFile,
  isDir,
  isJsFile,
  readFile,
  writeFile
};